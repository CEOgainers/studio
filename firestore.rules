rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user has a specific role.
    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow users to read and write to their own document.
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow admins to read any user document (for user management).
      allow get: if request.auth != null && isRole('Admin');
      // Allow admins to list users.
      allow list: if request.auth != null && isRole('Admin');
    }

    // Rules for the 'services' collection
    match /services/{serviceId} {
      // Anyone can read services (for the landing page).
      allow get, list: if true;
      
      // Only users with the 'Admin' role can create, update, or delete services.
      allow create, update, delete: if request.auth != null && isRole('Admin');
    }
    
    // Rules for the 'payments' collection
    match /payments/{paymentId} {
        // Allow authenticated users to create their own payment records.
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        // Allow admins to read payment records for verification.
        allow read, list, update: if request.auth != null && isRole('Admin');
    }
  }
}
